# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class PRDTemplate(BaseModel):
    """
    PRDTemplate
    """
    id: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    title: constr(strict=True, max_length=255, min_length=1) = Field(...)
    template: constr(strict=True, min_length=1) = Field(...)
    created_by: Optional[StrictStr] = None
    created_date: Optional[datetime] = None
    modified_date: Optional[datetime] = None
    __properties = ["id", "organization", "title", "template", "created_by", "created_date", "modified_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PRDTemplate:
        """Create an instance of PRDTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "organization",
                            "created_date",
                            "modified_date",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PRDTemplate:
        """Create an instance of PRDTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PRDTemplate.parse_obj(obj)

        _obj = PRDTemplate.parse_obj({
            "id": obj.get("id"),
            "organization": obj.get("organization"),
            "title": obj.get("title"),
            "template": obj.get("template"),
            "created_by": obj.get("created_by"),
            "created_date": obj.get("created_date"),
            "modified_date": obj.get("modified_date")
        })
        return _obj


