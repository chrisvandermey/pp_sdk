# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from pp_sdk.models.created_by import CreatedBy
from pp_sdk.models.owner_users_inner import OwnerUsersInner
from pp_sdk.models.tags_inner import TagsInner

class Program(BaseModel):
    """
    Program
    """
    id: Optional[StrictStr] = None
    name: constr(strict=True, max_length=255, min_length=1) = Field(...)
    description: Optional[StrictStr] = None
    charter: Optional[StrictStr] = None
    principal_users: Optional[conlist(OwnerUsersInner)] = None
    stakeholder_users: Optional[conlist(OwnerUsersInner)] = None
    parent: Optional[StrictStr] = None
    tags: Optional[conlist(TagsInner)] = None
    created_by: Optional[CreatedBy] = None
    created_date: Optional[datetime] = None
    modified_date: Optional[datetime] = None
    __properties = ["id", "name", "description", "charter", "principal_users", "stakeholder_users", "parent", "tags", "created_by", "created_date", "modified_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Program:
        """Create an instance of Program from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "principal_users",
                            "stakeholder_users",
                            "tags",
                            "created_date",
                            "modified_date",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in principal_users (list)
        _items = []
        if self.principal_users:
            for _item in self.principal_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['principal_users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stakeholder_users (list)
        _items = []
        if self.stakeholder_users:
            for _item in self.stakeholder_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stakeholder_users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if charter (nullable) is None
        # and __fields_set__ contains the field
        if self.charter is None and "charter" in self.__fields_set__:
            _dict['charter'] = None

        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        # set to None if created_date (nullable) is None
        # and __fields_set__ contains the field
        if self.created_date is None and "created_date" in self.__fields_set__:
            _dict['created_date'] = None

        # set to None if modified_date (nullable) is None
        # and __fields_set__ contains the field
        if self.modified_date is None and "modified_date" in self.__fields_set__:
            _dict['modified_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Program:
        """Create an instance of Program from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Program.parse_obj(obj)

        _obj = Program.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "charter": obj.get("charter"),
            "principal_users": [OwnerUsersInner.from_dict(_item) for _item in obj.get("principal_users")] if obj.get("principal_users") is not None else None,
            "stakeholder_users": [OwnerUsersInner.from_dict(_item) for _item in obj.get("stakeholder_users")] if obj.get("stakeholder_users") is not None else None,
            "parent": obj.get("parent"),
            "tags": [TagsInner.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "created_by": CreatedBy.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_date": obj.get("created_date"),
            "modified_date": obj.get("modified_date")
        })
        return _obj


