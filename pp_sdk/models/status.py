# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from pp_sdk.models.goal_base import GoalBase
from pp_sdk.models.user import User

class Status(BaseModel):
    """
    Status
    """
    id: Optional[StrictStr] = None
    goal: Optional[GoalBase] = None
    status: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    status_note: Optional[StrictStr] = None
    path_to_green: Optional[StrictStr] = None
    publishing_state: Optional[StrictStr] = None
    created_by: Optional[User] = None
    created_date: Optional[datetime] = None
    __properties = ["id", "goal", "status", "date", "status_note", "path_to_green", "publishing_state", "created_by", "created_date"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED'):
            raise ValueError("must be one of enum values ('RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED')")
        return value

    @validator('publishing_state')
    def publishing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING_REVIEW', 'DRAFT', 'REJECTED', 'APPROVED', 'PUBLISHED'):
            raise ValueError("must be one of enum values ('PENDING_REVIEW', 'DRAFT', 'REJECTED', 'APPROVED', 'PUBLISHED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Status:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_date",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of goal
        if self.goal:
            _dict['goal'] = self.goal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if var_date (nullable) is None
        # and __fields_set__ contains the field
        if self.var_date is None and "var_date" in self.__fields_set__:
            _dict['date'] = None

        # set to None if status_note (nullable) is None
        # and __fields_set__ contains the field
        if self.status_note is None and "status_note" in self.__fields_set__:
            _dict['status_note'] = None

        # set to None if path_to_green (nullable) is None
        # and __fields_set__ contains the field
        if self.path_to_green is None and "path_to_green" in self.__fields_set__:
            _dict['path_to_green'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Status:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Status.parse_obj(obj)

        _obj = Status.parse_obj({
            "id": obj.get("id"),
            "goal": GoalBase.from_dict(obj.get("goal")) if obj.get("goal") is not None else None,
            "status": obj.get("status"),
            "var_date": obj.get("date"),
            "status_note": obj.get("status_note"),
            "path_to_green": obj.get("path_to_green"),
            "publishing_state": obj.get("publishing_state"),
            "created_by": User.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_date": obj.get("created_date")
        })
        return _obj


