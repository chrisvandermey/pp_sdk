# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr, constr, validator

class UserStory(BaseModel):
    """
    UserStory
    """
    id: Optional[StrictStr] = None
    prd: Optional[constr(strict=True, min_length=1)] = None
    as_a: Optional[constr(strict=True, max_length=255)] = None
    i_want_to: Optional[constr(strict=True, max_length=255)] = None
    so_that: Optional[constr(strict=True, max_length=255)] = None
    freetext_override: Optional[StrictStr] = None
    created_date: Optional[datetime] = None
    modified_date: Optional[datetime] = None
    due_date: Optional[datetime] = None
    status: Optional[StrictStr] = None
    priority: Optional[constr(strict=True, max_length=50)] = None
    tags: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "prd", "as_a", "i_want_to", "so_that", "freetext_override", "created_date", "modified_date", "due_date", "status", "priority", "tags", "created_by"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED'):
            raise ValueError("must be one of enum values ('RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserStory:
        """Create an instance of UserStory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_date",
                            "modified_date",
                            "tags",
                            "created_by",
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if as_a (nullable) is None
        # and __fields_set__ contains the field
        if self.as_a is None and "as_a" in self.__fields_set__:
            _dict['as_a'] = None

        # set to None if i_want_to (nullable) is None
        # and __fields_set__ contains the field
        if self.i_want_to is None and "i_want_to" in self.__fields_set__:
            _dict['i_want_to'] = None

        # set to None if so_that (nullable) is None
        # and __fields_set__ contains the field
        if self.so_that is None and "so_that" in self.__fields_set__:
            _dict['so_that'] = None

        # set to None if freetext_override (nullable) is None
        # and __fields_set__ contains the field
        if self.freetext_override is None and "freetext_override" in self.__fields_set__:
            _dict['freetext_override'] = None

        # set to None if due_date (nullable) is None
        # and __fields_set__ contains the field
        if self.due_date is None and "due_date" in self.__fields_set__:
            _dict['due_date'] = None

        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserStory:
        """Create an instance of UserStory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserStory.parse_obj(obj)

        _obj = UserStory.parse_obj({
            "id": obj.get("id"),
            "prd": obj.get("prd"),
            "as_a": obj.get("as_a"),
            "i_want_to": obj.get("i_want_to"),
            "so_that": obj.get("so_that"),
            "freetext_override": obj.get("freetext_override"),
            "created_date": obj.get("created_date"),
            "modified_date": obj.get("modified_date"),
            "due_date": obj.get("due_date"),
            "status": obj.get("status"),
            "priority": obj.get("priority"),
            "tags": obj.get("tags"),
            "created_by": obj.get("created_by")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


