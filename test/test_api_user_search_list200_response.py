# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_user_search_list200_response import ApiUserSearchList200Response

class TestApiUserSearchList200Response(unittest.TestCase):
    """ApiUserSearchList200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiUserSearchList200Response:
        """Test ApiUserSearchList200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiUserSearchList200Response`
        """
        model = ApiUserSearchList200Response()
        if include_optional:
            return ApiUserSearchList200Response(
                count = 56,
                next = '',
                previous = '',
                results = [
                    openapi_client.models.user.User(
                        id = '', 
                        email = '0', 
                        first_name = '', 
                        last_name = '', 
                        is_active = True, 
                        is_staff = True, 
                        date_joined = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        organization = openapi_client.models.organization.Organization(
                            id = '', 
                            name = '0', ), 
                        address = openapi_client.models.address.Address(
                            street_address = '0', 
                            city = '0', 
                            state = '0', 
                            postal_code = '0', 
                            country = '0', ), 
                        user_facts = openapi_client.models.user_facts.User facts(), 
                        walkthrough_status = openapi_client.models.walkthrough_status.Walkthrough status(), )
                    ]
            )
        else:
            return ApiUserSearchList200Response(
                count = 56,
                results = [
                    openapi_client.models.user.User(
                        id = '', 
                        email = '0', 
                        first_name = '', 
                        last_name = '', 
                        is_active = True, 
                        is_staff = True, 
                        date_joined = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        organization = openapi_client.models.organization.Organization(
                            id = '', 
                            name = '0', ), 
                        address = openapi_client.models.address.Address(
                            street_address = '0', 
                            city = '0', 
                            state = '0', 
                            postal_code = '0', 
                            country = '0', ), 
                        user_facts = openapi_client.models.user_facts.User facts(), 
                        walkthrough_status = openapi_client.models.walkthrough_status.Walkthrough status(), )
                    ],
        )
        """

    def testApiUserSearchList200Response(self):
        """Test ApiUserSearchList200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
